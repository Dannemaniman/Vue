//PROGRAM 1

<script src="https://unpkg.com/vue/dist/vue.js"></script>

<div id="app">
  <h1 v-once>{{ title }}</h1>
  <p>{{ sayHello() }} - <a v-bind:href="link">Google</a></p>
  <hr>
  <p v-html="finishedLink"></p>
</div>

new Vue({
	el: '#app',
  data: {
  	title: 'Hello World!',
    link: 'http://google.com',
    finishedLink: '<a href="http://google.com">Google</a>'
  },
  methods: {
  	sayHello: function() {
    	this.title = 'Hello!';
    	return this.title;
    }
  }
});


//Program 2

<script src="https://unpkg.com/vue/dist/vue.js"></script>

<div id="app">
  <button v-on:click="increase(2, $event)">Click me</button>
  <p>{{ counter }}</p>
  <p v-on:mousemove="updateCoordinates">
    Coordinates: {{ x }} / {{ y }}
    - <span v-on:mousemove.stop="">DEAD SPOT</span>
  </p>
  <input type="text" v-on:keyup.enter.space="alertMe">
</div>

new Vue({
	el: '#app',
  data: {
  	counter: 0,
    x: 0,
    y: 0
  },
  methods: {
  	increase: function(step, event) {
    	this.counter += step;
    },
    updateCoordinates: function(event) {
    	this.x = event.clientX;
      this.y = event.clientY;
    },
    alertMe: function() {
    	alert('Alert!');
    }
  }
});

PROGRAM 3

https://api.getaccept.com/v1/documents/y99zzcrq9rv/events

PROGRAM 4

<script src="https://unpkg.com/vue/dist/vue.js"></script>

<div id="app">
  <div
    class="demo"
    @click="attachRed = !attachRed"
    :class="divClasses">
    
    </div>
    <div class="demo" @click="attachRed = !attachRed" :class="{blue: attachRed}"></div>
    <div class="demo" :class="{green: attachRed}"></div>
    <div class="demo" :class="color">
    </div>
    <hr>
    <input type="text" v-model="color">
    <input type="text" v-model="width">
    <input type="text" v-model="height">
    <hr>
    <div class="demo" :style="myStyle">
    
    
    </div>
    <div class="demo" :style="myStyle">
    
    </div>
</div>

new Vue({
	el: '#app',
  data: {
  	attachRed: false,
    color: 'green',
    width: 100,
    height: 100
  },
  	computed: {
  		divClasses: function() {
    		return {
      		red: this.attachRed,
     	 	 blue: !this.attachRed
  		  }
   		 },
     myStyle: function(){
     	return {
      	backgroundColor: this.color,
        width: this.width + 'px',
        height: this.height + 'px'
      }
     }
  	}
})

.demo {
   width: 100px;
   height: 100px;
   background-color: gray;
   display: inline-block;
   margin: 10px;
}

.red {
  background-color: red;
}

.blue {
  background-color: blue;
}

.green {
  background-color: green;
}

PROGRAM 5

<script src="https://unpkg.com/vue/dist/vue.js"></script>

<div id="app">
<p v-if="show">Now you see me.</p>
<p v-else>See me?</p>
<button @click="show = !show">Göm mig.</button>
<template v-if="show">
  <hr>
  <p>Ser du Mig?</p>
  
</template>

<input type="text" v-model="color">
<div class="lodda" :class="color"></div>



<hr>
<input type="text" v-model="width">
<div class="lodda" :style="myStyle2">

</div>
</div>

new Vue ({
  el: '#app',
  data: {
    show: true,
    color: 'green',
    width: 100,
    height: 200
  },
	computed: {
  	myStyle: function(){
      return {
        width: this.width + 'px',
        height: this.height + 'px',
        backgroundColor: this.color
      }
     },
          myStyle2: function(){
     	return {
      	backgroundColor: this.color,
        width: this.width + 'px',
        height: this.height + 'px'
      }
     }
  }
})

.lodda {
  height: 100px;
  width: 100px;
  background-color: blue;
}

.red {
  background-color: red;
}

.blue {
  background-color: blue;
}

.green {
  background-color: green;
}

PROGRAM 6

<script src="https://npmcdn.com/vue/dist/vue.js"></script>

<div id="exercise">
  <!-- 1) Start the Effect with the Button. The Effect should alternate the "highlight" or "shrink" class on each new setInterval tick (attach respective class to the div with id "effect" below) -->
  <div>
    <button @click="startEffect">Start Effect</button>
    <div id="effect" v-bind:class="effectClasses"></div>
  </div>
  <!-- 2) Create a couple of CSS classes and attach them via the array syntax -->
  <div id="effect" :class="[{tool: true}, {tool2: true}]">I got no class :(</div>
  <!-- 3) Let the user enter a class (create some example classes) and attach it -->
  <div>
    <input type="text" v-model="customClasses.cuztomClass">
    <div id="effect" :class="customClasses.cuztomClass"></div>
  </div>
  <!-- 4) Let the user enter a class and enter true/ false for another class (create some example classes) and attach the classes -->
  <div>
    <input type="text" v-model="customClasses.cuztomClass">
    <input type="text">
    <div id="effect" :class="customClasses.cuztomClass"></div>
  </div>
  <!-- 5) Repeat 3) but now with values for styles (instead of class names). Attach the respective styles.  -->
  <div>
    <input type="text">
    <div></div>
  </div>
  <!-- 6) Create a simple progress bar with setInterval and style bindings. Start it by hitting the below button. -->
  <div>
    <button>Start Progress</button>
    <div></div>
  </div>
</div>


new Vue({
  el: '#exercise',
  data: {
		effectClasses: {
    	shrink: false,
      highlight: true
    },
    shouldAttachClass: {
    	tool: true,
      tool2: true
    },
    customClasses: {
    	cuztomClass: 'take'
    }
  },
  methods: {
    startEffect: function() {
    	var vm = this
      	setInterval(function() {
        	vm.effectClasses.shrink = !vm.effectClasses.shrink,
          vm.effectClasses.highlight = !vm.effectClasses.highlight
        }, 1000)
    }
  }
});


#effect {
  width: 100px;
  height: 100px;
  border: 1px solid black;
}

.highlight {
  background-color: red;
  width: 200px !important;
}

.shrink {
  background-color: gray;
  width: 50px !important;
}
.tool {
  background-color: green;
}

.tool2 {
  height: 50px !important;
}

.take {
  background-color: red;
}

.take2 {
  background-color: blue;
}